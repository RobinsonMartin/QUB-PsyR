legend('bottomleft', legend = c('26 Items', '16 Items', '14 Items'),
col = 'blue', lty = c(3,2,1), bty = 'n')
library(psych)
alpha.ci(dataSel2)
psych::alpha(dataSel2)
###########################################
### IRT analysis of anti-natalism scale ###
###########################################
# This sets your working directory to the directory containing the R script.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 0. load library and data ------------------------------------------------
library(dplyr)
library(mirt)
data_forsthoff = read.csv("data_forsthoff.csv", header = T)
# 1. rename and recode items ---------------------------------------
# 1.1 rename items from the AN scale ---------------------------------------
dataAN = data_forsthoff %>% select(natalQuest_parent_role_01R:natalQuest_politics_measures_26R)
names(dataAN) <- c("item1_parent_role","item2_endure_person","item3_own_children","item4_life_plan","item5_personal_idea","item6_fulfilled_life","item7_complete_family",
"item8_childbearing_meaning","item9_prospective_parent","item10_central_lifegoal","item11_important_decisions",
"item12_parenting","item13_love_affection","item14_reproduction","item15_happiness_parenting",
"item16_resistance_parenting","item17_reaction_no_children","item18_responsability_society","item19_reaction_parentbehaviour",
"item20_meaningful_existence","item21_no_children_places","item22_living_area_family","item23_spending_time",
"item24_media_parent_topics","item25_cancel_plans","item26_politics_measures")
# 1.2. recode pro-natalistic items --------------------------------------
# items 1, 2, 3, 5, 7, 9, 11, 13, 17, 18, 22, 23, 26
dataANR = dataAN %>% mutate(
item1_parent_role = recode(dataAN$item1_parent_role, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item2_endure_person = recode(dataAN$item2_endure_person, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item3_own_children = recode(dataAN$item3_own_children, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item5_personal_idea = recode(dataAN$item5_personal_idea, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item7_complete_family = recode(dataAN$item7_complete_family, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item9_prospective_parent = recode(dataAN$item9_prospective_parent, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item11_important_decisions = recode(dataAN$item11_important_decisions, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item13_love_affection = recode(dataAN$item13_love_affection, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item17_reaction_no_children = recode(dataAN$item17_reaction_no_children, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item18_responsability_society = recode(dataAN$item18_responsability_society, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item22_living_area_family = recode(dataAN$item22_living_area_family, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item23_spending_time = recode(dataAN$item23_spending_time, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item26_politics_measures = recode(dataAN$item26_politics_measures, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1))
# 2. IRT analysis ---------------------------------------------------------
mod1 = mirt(dataANR, model = 1, verbose = FALSE, itemtype = 'graded', SE = TRUE)
M2(mod1)
itemfit(mod1)
IRT_parms = coef(mod1, IRTpars = TRUE, simplify = TRUE)
IRT_parms$items
summary(mod1)
# 3. plots ----------------------------------------------------------------
plot(mod1, type='trace', facet_items=T,
as.table = TRUE, auto.key=list(points=F, lines=T, columns=6, space = 'top', cex = .8),
theta_lim = c(-3, 3),
main = "")
plot(mod1, type = "info", theta_lim = c(-3,3))
plot(mod1, type = "rxx", theta_lim = c(-3,3))
lines(x = c(-3,4), y = c(0.8, 0.8), col = 'red', lty = 3)
itemplot(mod1, item = 1, type = "trace", theta_lim = c(-3,3))
itemplot(mod1, item = 1, type = "info", theta_lim = c(-3,3))
layout(t(matrix(1:30, nrow = 6)))
for(i in 1:26){
itemplot(mod1, item = i, type = "info", theta_lim = c(-3,3))
}
a = itemplot(mod1, item = 1, type = "info", theta_lim = c(-3,3), shiny = F)
itemplot(mod1, item = 2, type = "info", theta_lim = c(-3,3), add = T)
pStar = function(xs, a, bs, theta, myPalette = rainbow(n = length(xs))){
ps = matrix(NA, ncol = length(xs)-1, nrow = length(theta))
for(i in 1:length(bs)){
ps[,i] = exp(a*(theta-bs[i])) / (1+(exp(a*(theta-bs[i]))))
}
plot(theta, (1-ps[,1]), col = myPalette[1], type = 'l', ylim = c(0,1),
xlab = bquote(theta), ylab = bquote(paste("P(", theta, ")")))
for(i in 1:(length(bs)-1)){
lines(theta, (ps[,i]- ps[,i+1]), col = myPalette[i+1])
}
lines(theta, ps[,length(bs)], col = myPalette[length(xs)])
}
pStar(xs = 1:6, a = IRT_parms$items[1,1], bs = IRT_parms$items[1,2:6], theta = seq(-3,3,.1),
myPalette = c("skyblue", "purple", "darkgreen", "red", "orange", "green"))
#### item information curves for all items
layout(t(matrix(1:28, nrow = 7)))
totalInfo = rep(NA, ncol(dataANR))
for(i in 1:ncol(dataANR)){
par(mar = c(2,2,3,0))
tmp = itemplot(mod1, item = i, type = "info", theta_lim = c(-4,4))
plot(tmp$panel.args[[1]]$x, tmp$panel.args[[1]]$y, type = 'l', lwd = 2, col = "blue",
ylim = c(0,15), main = paste("Item", i))
totalInfo[i] = sum(tmp$panel.args[[1]]$y)
}
totalInfo
dataSel = dataANR[, which(totalInfo > 77)]  # excludes the weakest 10 items
mod2 = mirt(dataSel, model = 1, verbose = FALSE, itemtype = 'graded', SE = TRUE)
M2(mod2)
itemfit(mod2)
IRT_parms = coef(mod2, IRTpars = TRUE, simplify = TRUE)
IRT_parms$items
summary(mod2)
plot(mod2, type='trace', facet_items=T,
as.table = TRUE, auto.key=list(points=F, lines=T, columns=6, space = 'top', cex = .8),
theta_lim = c(-3, 3),
main = "")
plot(mod2, type = "info", theta_lim = c(-3,3))
layout(1)
plot(plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
ylim = c(0,1), type = 'l', col = 'blue')
lines(x = c(-3,4), y = c(0.8, 0.8), col = 'red', lty = 3)
### remove items 5 and 6 due to redundancy
dataSel2 = dataSel %>% select(-item5_personal_idea, -item6_fulfilled_life)
mod3 = mirt(dataSel2, model = 1, verbose = FALSE, itemtype = 'graded', SE = TRUE)
M2(mod3)
itemfit(mod3)
IRT_parms = coef(mod3, IRTpars = TRUE, simplify = TRUE)
IRT_parms$items
summary(mod3)
# 2. plots ----------------------------------------------------------------
plot(mod3, type='trace', facet_items=T,
as.table = TRUE, auto.key=list(points=F, lines=T, columns=6, space = 'top', cex = .8),
theta_lim = c(-3, 3),
main = "")
plot(mod3, type = "info", theta_lim = c(-3,3))
layout(1)
plot(plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
ylim = c(0,1), type = 'l', col = 'blue')
lines(x = c(-3,4), y = c(0.8, 0.8), col = 'red', lty = 3)
### comparison of 16 item and 14 item version
par(mar = c(4,4,1,1))
plot(plot(mod1, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod1, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
ylim = c(0,1), type = 'l', col = 'blue', lty = 3,
xlab = bquote(theta), ylab = "Reliability")
lines(plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
col = 'blue', lty = 2)
lines(plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
col = 'blue', lty = 1)
lines(x = c(-4,4), y = c(0.8, 0.8), col = 'red', lty = 3)
lines(x = c(-4,4), y = c(0.7, 0.7), col = 'red', lty = 3)
lines(x = c(-4,4), y = c(0.9, 0.9), col = 'red', lty = 3)
lines(x = c(-4,4), y = c(0.6, 0.6), col = 'red', lty = 3)
legend('bottomleft', legend = c('26 Items', '16 Items', '14 Items'),
col = 'blue', lty = c(3,2,1), bty = 'n')
### CTT measure of internal consistency
library(psych)
psych::alpha(dataSel2)
# This sets your working directory to the directory containing the R script.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 0. load library and data ------------------------------------------------
library(dplyr)
library(mirt)
data_forsthoff = read.csv("data_forsthoff.csv", header = T)
table(data_forsthoff$gender)
View(data_forsthoff)
View(data_forsthoff)
names(data_forsthoff)
table(data_forsthoff$kids)
# This sets your working directory to the directory containing the R script.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 0. load library and data ------------------------------------------------
library(dplyr)
library(mirt)
data_draxler = read.csv("data_draxler.csv", header = T)
# 1. rename and recode items ---------------------------------------
# 1.1 rename items fro the AN scale ---------------------------------------
dataAN = data_draxler %>% select(parent_role:politics_measures)
names(dataAN) <- c("item1_parent_role","item2_endure_person","item3_own_children","item4_life_plan","item5_personal_idea","item6_fulfilled_life","item7_complete_family",
"item8_childbearing_meaning","item9_prospective_parent","item10_central_lifegoal","item11_important_decisions",
"item12_parenting","item13_love_affection","item14_reproduction","item15_happiness_parenting",
"item16_resistance_parenting","item17_reaction_no_children","item18_responsability_society","item19_reaction_parentbehaviour",
"item20_meaningful_existence","item21_no_children_places","item22_living_area_family","item23_spending_time",
"item24_media_parent_topics","item25_cancel_plans","item26_politics_measures")
# 1.2. recode pro-natalistic items --------------------------------------
# items 1, 2, 3, 5, 7, 9, 11, 13, 17, 18, 22, 23, 26
dataANR = dataAN %>% mutate(
item1_parent_role = recode(dataAN$item1_parent_role, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item2_endure_person = recode(dataAN$item2_endure_person, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item3_own_children = recode(dataAN$item3_own_children, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item5_personal_idea = recode(dataAN$item5_personal_idea, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item7_complete_family = recode(dataAN$item7_complete_family, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item9_prospective_parent = recode(dataAN$item9_prospective_parent, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item11_important_decisions = recode(dataAN$item11_important_decisions, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item13_love_affection = recode(dataAN$item13_love_affection, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item17_reaction_no_children = recode(dataAN$item17_reaction_no_children, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item18_responsability_society = recode(dataAN$item18_responsability_society, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item22_living_area_family = recode(dataAN$item22_living_area_family, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item23_spending_time = recode(dataAN$item23_spending_time, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1),
item26_politics_measures = recode(dataAN$item26_politics_measures, `1`=6, `2`=5, `3`=4, `4`=3, `5`=2, `6`=1))
mod1 = mirt(dataANR, model = 1, verbose = FALSE, itemtype = 'graded', SE = TRUE)
M2(mod1)
itemfit(mod1)
IRT_parms = coef(mod1, IRTpars = TRUE, simplify = TRUE)
IRT_parms$items
summary(mod1)
# 2. plots ----------------------------------------------------------------
plot(mod1, type='trace', facet_items=T,
as.table = TRUE, auto.key=list(points=F, lines=T, columns=6, space = 'top', cex = .8),
theta_lim = c(-3, 3),
main = "")
plot(mod1, type = "info", theta_lim = c(-3,3))
plot(mod1, type = "rxx", theta_lim = c(-3,3))
lines(x = c(-3,4), y = c(0.8, 0.8), col = 'red', lty = 3)
itemplot(mod1, item = 1, type = "trace", theta_lim = c(-3,3))
itemplot(mod1, item = 1, type = "info", theta_lim = c(-3,3))
layout(t(matrix(1:30, nrow = 6)))
for(i in 1:26){
itemplot(mod1, item = i, type = "info", theta_lim = c(-3,3))
}
a = itemplot(mod1, item = 1, type = "info", theta_lim = c(-3,3), shiny = F)
itemplot(mod1, item = 2, type = "info", theta_lim = c(-3,3), add = T)
### plot ICC
pStar = function(xs, a, bs, theta, myPalette = rainbow(n = length(xs))){
ps = matrix(NA, ncol = length(xs)-1, nrow = length(theta))
for(i in 1:length(bs)){
ps[,i] = exp(a*(theta-bs[i])) / (1+(exp(a*(theta-bs[i]))))
}
plot(theta, (1-ps[,1]), col = myPalette[1], type = 'l', ylim = c(0,1),
xlab = bquote(theta), ylab = bquote(paste("P(", theta, ")")))
for(i in 1:(length(bs)-1)){
lines(theta, (ps[,i]- ps[,i+1]), col = myPalette[i+1])
}
lines(theta, ps[,length(bs)], col = myPalette[length(xs)])
}
pStar(xs = 1:6, a = IRT_parms$items[1,1], bs = IRT_parms$items[1,2:6], theta = seq(-3,3,.1),
myPalette = c("skyblue", "purple", "darkgreen", "red", "orange", "green"))
#### item information curves for all items
layout(t(matrix(1:28, nrow = 7)))
totalInfo = rep(NA, ncol(dataANR))
for(i in 1:ncol(dataANR)){
par(mar = c(2,2,3,0))
tmp = itemplot(mod1, item = i, type = "info", theta_lim = c(-4,4))
plot(tmp$panel.args[[1]]$x, tmp$panel.args[[1]]$y, type = 'l', lwd = 2, col = "blue",
ylim = c(0,15), main = paste("Item", i))
totalInfo[i] = sum(tmp$panel.args[[1]]$y)
}
totalInfo
dataSel = dataANR[, which(totalInfo > 100)]
mod2 = mirt(dataSel, model = 1, verbose = FALSE, itemtype = 'graded', SE = TRUE)
M2(mod2)
itemfit(mod2)
IRT_parms = coef(mod2, IRTpars = TRUE, simplify = TRUE)
IRT_parms$items
summary(mod2)
# 2. plots ----------------------------------------------------------------
plot(mod2, type='trace', facet_items=T,
as.table = TRUE, auto.key=list(points=F, lines=T, columns=6, space = 'top', cex = .8),
theta_lim = c(-3, 3),
main = "")
plot(mod2, type = "info", theta_lim = c(-3,3))
layout(1)
plot(plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
ylim = c(0,1), type = 'l', col = 'blue')
lines(x = c(-3,4), y = c(0.8, 0.8), col = 'red', lty = 3)
which(totalInfo <= 100)
### remove items 5 and 6 due to redundancy
dataSel2 = dataSel %>% select(-item5_personal_idea, -item6_fulfilled_life)
mod3 = mirt(dataSel2, model = 1, verbose = FALSE, itemtype = 'graded', SE = TRUE)
M2(mod3)
itemfit(mod3)
IRT_parms = coef(mod3, IRTpars = TRUE, simplify = TRUE)
IRT_parms$items
summary(mod3)
# 2. plots ----------------------------------------------------------------
plot(mod3, type='trace', facet_items=T,
as.table = TRUE, auto.key=list(points=F, lines=T, columns=6, space = 'top', cex = .8),
theta_lim = c(-3, 3),
main = "")
plot(mod3, type = "info", theta_lim = c(-3,3))
layout(1)
plot(plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
ylim = c(0,1), type = 'l', col = 'blue')
lines(x = c(-3,4), y = c(0.8, 0.8), col = 'red', lty = 3)
### comparison of 16 item and 14 item version
par(mar = c(4,4,1,1))
plot(plot(mod1, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod1, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
ylim = c(0,1), type = 'l', col = 'blue', lty = 3,
xlab = bquote(theta), ylab = "Reliability")
lines(plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod2, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
col = 'blue', lty = 2)
lines(plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$x,
plot(mod3, type = "rxx", theta_lim = c(-3,3))$panel.args[[1]]$y,
col = 'blue', lty = 1)
lines(x = c(-4,4), y = c(0.8, 0.8), col = 'red', lty = 3)
lines(x = c(-4,4), y = c(0.7, 0.7), col = 'red', lty = 3)
lines(x = c(-4,4), y = c(0.9, 0.9), col = 'red', lty = 3)
lines(x = c(-4,4), y = c(0.6, 0.6), col = 'red', lty = 3)
legend('bottomleft', legend = c('26 Items', '16 Items', '14 Items'),
col = 'blue', lty = c(3,2,1), bty = 'n')
### CTT measure of internal consistency
library(psych)
psych::alpha(dataSel2)
library(rgl)
library(rglwidget)
library(htmltools)
theta <- seq(0, 6*pi, len=100)
xyz <- cbind(sin(theta), cos(theta), theta)
lineid <- plot3d(xyz, type="l", alpha = 1:0,
lwd = 5, col = "blue")["data"]
browsable(tagList(
rglwidget(elementId = "example", width = 500, height = 400,
controllers = "player"),
playwidget("example",
ageControl(births = theta, ages = c(0, 0, 1),
objids = lineid, alpha = c(0, 1, 0)),
start = 1, stop = 6*pi, step = 0.1,
rate = 6,elementId = "player")
))
install.packages("rgl")
install.packages("rglwidget")
library(rgl)
library(rglwidget)
library(htmltools)
theta <- seq(0, 6*pi, len=100)
xyz <- cbind(sin(theta), cos(theta), theta)
lineid <- plot3d(xyz, type="l", alpha = 1:0,
lwd = 5, col = "blue")["data"]
browsable(tagList(
rglwidget(elementId = "example", width = 500, height = 400,
controllers = "player"),
playwidget("example",
ageControl(births = theta, ages = c(0, 0, 1),
objids = lineid, alpha = c(0, 1, 0)),
start = 1, stop = 6*pi, step = 0.1,
rate = 6,elementId = "player")
))
install.packages("rtools")
a = 7
a = c(1,7,8)
a = 7
typeof(a)
#| echo: false
a = 7
typeof(a)
b = T
typeof(b)
typeof(b*ch)
c = 'hello'
typeof)c
typeof(c)
v2 = c('hello', 'purple', '11!')  # This creates a character vector
v1 = c(1,2,3)
matrix(1:5, nrow = 2, ncol = 2)
matrix(1:5, nrow = 2, ncol = 3)
help(help)
help(dplyr)
help(cars)
install.packages("learnr")
var3 = rep(NA, reps)
reps = 10000
var3 = rep(NA, reps)
var10 =rep(NA, reps)
reps = 10000
var3 = rep(NA, reps)
var10 =rep(NA, reps)
for(i in 1:reps){
var3[i] = var(rnorm(3, 0, 1))
var10[i] = var(rnorm(10, 0, 1))
}
mean(var3)
mean(var10)
reps = 10000
var3 = rep(NA, reps)
var10 =rep(NA, reps)
for(i in 1:reps){
var3[i] = range(rnorm(3, 0, 1))
var10[i] = range(rnorm(10, 0, 1))
}
mean(var3)
mean(var10)
reps = 10000
var3 = rep(NA, reps)
var10 =rep(NA, reps)
for(i in 1:reps){
var3[i] = range(rnorm(3, 10, 1))
var10[i] = range(rnorm(10, 10, 1))
}
mean(var3)
mean(var10)
help(mean)
help(c)
my_data_frame = data.frame(
c(1, 2, 3, 4, 5),                                       # participant ID
c('male', 'female', 'non-binary', 'female', 'female'),  # participant gender
c(25, 19, 23, 22, 28)                                   # participant age
)
View(my_data_frame)
View(my_data_frame)
#| eval: true
#| echo: true
my_data_frame
my_data_frame = data.frame(
c(1, 2, 3, 4, 5),                                       # participant ID
c('male', 'female', 'non-binary', 'female', 'female'),  # participant gender
c(25, 19, 23, 22, 28)                                   # participant age
)
my_data_frame
my_data_frame = (
ID = c(1, 2, 3, 4, 5),                                          # ID
#| eval: true
my_data_frame = data.frame(
ID = c(1, 2, 3, 4, 5),                                          # ID
gender = c('male', 'female', 'non-binary', 'female', 'female'), # gender
age = c(25, 19, 23, 22, 28)                                     # age
)
matrix(c(1:5, 1:5), nrow =2)
matrix(c(1:5, 1:5), nrow = 5)
matrix(c(1:10), nrow = 5)
my_data_frame = data.frame(
ID = c(1, 2, 3, 4, 5),                                          # ID
gender = c('male', 'female', 'non-binary', 'female', 'female'), # gender
age = c(25, 19, 23, 22, 28),                                    # age
matrix(c(1, 3, 5, 4, 3, 5, 5, 3, 2, 2), nrow = 5)               # responses
)
a = matrix(1:10, ncol = 2)
names(a)
names(a) = c('item1', 'item2')
a
colnames(a) = c('item1', 'item2')
a
a = matrix(1:10, ncol = 2. dimnames(NULL, c('item1', 'item2')))
a = matrix(1:10, ncol = 2. dimnames(NA, c('item1', 'item2')))
a = matrix(1:10, ncol = 2. dimnames(c('item1', 'item2')))
a = matrix(1:10, ncol = 2, dimnames(NULL, c('item1', 'item2')))
a = matrix(1:10, ncol = 2, dimnames(NULL, c('item1', 'item2')))
a = matrix(1:10, ncol = 2, dimnames(c('item1', 'item2')))
my_data_frame = data.frame(
ID = c(1, 2, 3, 4, 5),                                          # ID
gender = c('male', 'female', 'non-binary', 'female', 'female'), # gender
age = c(25, 19, 23, 22, 28),                                    # age
matrix(c(1, 3, 5, 4, 3, 5, 5, 3, 2, 2), nrow = 5)               # responses
my_data_frame
my_data_frame
#| eval: true
#| echo: true
my_data_frame
colnames(respone_matrix) = c('item1', 'item2')
#| eval: true
# First, we create our 5x2 matrix as an object
response_matrix = matrix(
c(1, 3, 5, 4, 3, 5, 5, 3, 2, 2),
nrow = 5
)
# Next, we assign column names
colnames(respone_matrix) = c('item1', 'item2')
#| eval: true
# First, we create our 5x2 matrix as an object
response_matrix = matrix(
c(1, 3, 5, 4, 3, 5, 5, 3, 2, 2),
nrow = 5
)
# Next, we assign column names
colnames(response_matrix) = c('item1', 'item2')
# Finally, we create the data frame
my_data_frame = data.frame(
ID = c(1, 2, 3, 4, 5),                                          # ID
gender = c('male', 'female', 'non-binary', 'female', 'female'), # gender
age = c(25, 19, 23, 22, 28),                                    # age
response_matrix                                                 # responses
)
#| eval: true
#| echo: true
my_data_frame
#|eval: true
my_value = 'hello'          # a single character value
my_vector = c(1,1,2,3,5,8)  # a numeric vector
# The following code creates a list with three elements
my_list = list(
my_value,
my_vector,
my_data_frame
)
rm(list(my_value, my_vector))
rm(my_value, my_vector)
View(my_list)
install.packages("palmerpenguins")
help(palmerpenguins)
??palmerpenguins
library(palmerpenguins)
palmerpenguins
help(palmerpenguins)
palmerpenguins::penguins
d1 = penguins
d1
write.csv(d1, "images/intro/palmer-penguins.csv", row.names = F)
c(TRUE, FALSE) + 7
#| eval: true
a = 6
2^(1/2)
2^-1
2^-2
5 ^ 4
(7+4) ^ 2
(7+4) ^   2
x = 3   # define a numeric value
y = 2   # define another value
z = x ^ 2 / (x - y)
z
z = x ^ 2 / (x * y - y)
z
9/4
z = x ^ 2 / (x * y - x)
z
v1 = 1:9  # create a vector of integers from 1 to 9
typeof(v1)
typeof(v1)/2
(v1)/2
typeof((v1)/2)
v1 = c(1,2,3,4,5,6,7,8,9)
v2 = 1:3
v1*v2
