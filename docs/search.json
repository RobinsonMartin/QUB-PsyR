[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this site",
    "section": "",
    "text": "This site is work in progress. I will continuously add or update content\n\nContributors: - Thomas Schultze-Gerlach (t.schultze(at)qub.ac.uk)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Space for QUB-Psy",
    "section": "",
    "text": "Welcome to the website. I hope you enjoy it!"
  },
  {
    "objectID": "intro1.html",
    "href": "intro1.html",
    "title": "R and RStudio",
    "section": "",
    "text": "R is a software for statistical analysis (among others), but we will not work with R directly. Instead, we will be using R via a software called Rstudio, which serves as a user interface. While there is nothing wrong with using R on its own, RStudio makes the life of the users easier."
  },
  {
    "objectID": "intro1.html#understanding-the-rstudio-interface",
    "href": "intro1.html#understanding-the-rstudio-interface",
    "title": "R and RStudio",
    "section": "Understanding the RStudio interface",
    "text": "Understanding the RStudio interface\nYou have got the latest version of R and RStudio on your computer and are eager to get things going? Great!\nIf you open R Studio for the first time, it will look like this:\n\n\n\nFig 1. RStudio interace when opening for the first time\n\n\nThe interface has three parts, the R console, the memory, and the utility and help area. Once you open your first R script (you can do do by clicking on “File”, selecting “New File”, and choosing “R Script”), a fourth (and probably the most important) appears in the top left, the script area (note; when you close all scripts, the script area will disappear again until a new script is opened).\n\n\n\nFig 2. RStudio interface when at least one script is open"
  },
  {
    "objectID": "intro1.html#the-rstudio-interface-components",
    "href": "intro1.html#the-rstudio-interface-components",
    "title": "R and RStudio",
    "section": "The RStudio interface components",
    "text": "The RStudio interface components\n\nThe console\nThe console is the direct link between RStudio and R. It executes the R code we enter, either manually or by running (part of) a script. With the exception of plots, the output of the code we entered, is also displayed in the console. We will be using the console mostly in the early states of getting used to working with R. We can execute code in the console by typing it in and confirming it via the “Enter” key. Doing so will directly produce the result of the code we entered (if we did it correctly) or an error message (if we managed to botch it up).\n\n\nThe memory\nThe memory area is one of the many advantages of using RStudio as compared to R only. It has different subsections. The subsection labeled Environment displays all the objects that are currently in R’s memory. Examples of such objects include variables we defined, data we read into R, or models we fit on our data. The list of objects in the Environment is rather handy because we do not need to memorize the names of all our objects, and we can even have a closer look at our more complex objects (e.g., we can have a look at the individual variables in our data object).\nThe second subsection is the History of our R session. The history contains all the code we sent to the console (irrespective of whether we did it by manually entering code in the console or by running a script). Using the History is handy if we want to trace back what we did, for example to search for errors.\n\n\nUtility and Help\nThe Utility and Help area located on the bottom right has five subsections, which can be tremendously helpful, so let’s have a closer look at them.\n\nFiles: This section displays the content of the current working directory. We can use it like the windows explorer to search for and load files.\nPlots: If we create plots, they will be displayed in this subsection.\nPackages: The base version of R comes with a wide range of functions that we can use to handle and analyse data. However, we will frequently want to do things that base R cannot do. In those situations, we will require additional R packages. The Packages section shows, which packages are installed on our computer, and which ones are currently active (more on that later).\nHelp: The Help section is very important. We can use it to obtain information on all functions and objects contained in base R and all currently active packages.\nViewer: We will rarely be using the Viewer when starting to learn R. It can be used to display local html-files that we can create using R.\n\n\n\nThe Script\nThe Script area in the top left of the interface is where we do most of our actual work. Here, we can create, save, load, and modify R scripts. If we open more than one script, each one will have its own tab displaying the name of the script (or labeling it as “unnamed” if we have not saved it yet). Clicking on the tabs lets us switch between scripts."
  },
  {
    "objectID": "intro2.html",
    "href": "intro2.html",
    "title": "Running code in R",
    "section": "",
    "text": "As mentioned before, the R console is where we execute code and where all the computing is done. Before we start using R scripts, we first need to get a rough understanding of what the R console does. Think of the console as a glorified calculator. You tell it to run a piece of code and then R returns the answer.\nThere are two ways to run code in R: entering it manually in the R console or writing a script and executing part or all of it."
  },
  {
    "objectID": "intro2.html#running-code-via-the-console",
    "href": "intro2.html#running-code-via-the-console",
    "title": "Running code in R",
    "section": "Running code via the console",
    "text": "Running code via the console\nWe can execute code by typing it in the console and hitting “Enter”. We will keep it simple for now. Lets say we want R to compute a few numbers. It could look like this:\n\n\n\nFig 1. Input and output of simple code in the R console\n\n\nAs we can see, each of the commands yields the appropriate answer. In theory, we could enter code that is much more complex, but entering long lines of code quickly becomes a hassle we would prefer to avoid. Also, once we close R we would have to enter the same code again manually, which is not only a lot of (unnecessary) work but also error prone.\n\nNote: Generally speaking, using the console directly to run code is not very sensible, the exception being queries using the help-function (more on the help-function later)."
  },
  {
    "objectID": "intro2.html#running-code-via-r-scripts",
    "href": "intro2.html#running-code-via-r-scripts",
    "title": "Running code in R",
    "section": "Running code via R scripts",
    "text": "Running code via R scripts\nThe most common way to run code in R is to write an R script and then execute it. The great advantage of an R script is that we can save it and re-run it as often as we want without having to enter everything by hand once again. If you are keen about Open Science, you can share the Script as part of your Open Analysis Code policy. Since R is free, researchers who want to look at, re-run, or even copy your code can do so without worrying about license fees.\nFor example, we can write a script containing the same computations we entered manually into the console above. To do so, we first need to create a new (end empty) R script by clicking on “File”, then on “New File” and selecting “R Script”.\n\n\n\nFig 2. Creating a new R script\n\n\nWe can now edit the script. Here, we enter each of the computations we want R to do as a single line of our script. Once all four lines are ready, we select them all (either by marking them with the mouse or by clicking ctrl+a). We then tell RStudio to run the selected code by clicking on the “Run”-button on the top right above the script or by pushing ctrl+Enter.\n\n\n\nFig 3. Running the code contained in the R script\n\n\nAs we can see, the output in the console looks as if we had manually entered the code and pressed “Enter” after each line. We could have obtained the same result by copy-pasting the content of the script into the console and hitting “Enter”.\nIn the image above, our script is yet unsaved as can be seen from its name “untitled1”. We can save it by clicking on the floppy disc Symbol (for those of you who still know what a 3.5” floppy disc is) or by clicking on “File” and then “Save” or “Save as”. Since we have not yet named our script, we will be prompted to select a name and to choose in which folder we want to save the script.\nFor example, we can name this script “my first script”. Once we have done that, the tab above the script shows the name of the script (or the start of the name if we chose a long name) followed by “.R” indicating that this is an R file.\n Also note how the name of the script is now shown in black font as opposed to the red font it had prior to saving. Writing a script’s name in red font is RStudio’s way of telling you that this script has unsaved changes."
  },
  {
    "objectID": "intro2.html#commenting-your-code",
    "href": "intro2.html#commenting-your-code",
    "title": "Running code in R",
    "section": "Commenting your code",
    "text": "Commenting your code\nOne crucial part of an R script are comments. Comments are used to explain the code we write. Commenting our scripts is very important as it provides structure to them and makes the code legible, be it for others who try to understand our code or to ourselves (trust me, you will learn to appreciate a well-commented code if you return to a script you wrote a few months back and cannot remember what you did there).\nWe can write comments by adding a # in front of the text. All text following a # in the same line will be ignored by R when running the script.\n\n\n\nFig 5. Running code with comments\n\n\nWhen running the script the whole code is copied to the console, but only the actual code is being evaluated. All the text that we declared as comments is being ignored.\n\nNote: A good rule of thumb is to have at least one line of comments for every four lines of code. When in doubt, opt for more or more detailed comments. Better to over-explain your code than to risk it being unintelligible."
  },
  {
    "objectID": "intro3.html",
    "href": "intro3.html",
    "title": "Objects and functions",
    "section": "",
    "text": "R revolves around objects and functions. Generally speaking, an object is a container for information, and a function is a piece of code that performs a specific task. We often use functions to manipulate or create objects."
  },
  {
    "objectID": "intro3.html#r-objects",
    "href": "intro3.html#r-objects",
    "title": "Objects and functions",
    "section": "R objects",
    "text": "R objects\nIn R, an object is information that we tore in R’s memory. In order to define an R object, we need to choose a name and tell R what information the object should contain. The general syntax for defining objects looks like this:\n\nobject_name = information\n\nWe write the name of our new object to the left of an equal sign and define the information the object should contain to its right. Instead of using an equal sign to define an object, we can also draw an arrow using the less than sign and a hyphen, which looks like this:\n\nobject_name <- information\n\n\nUsing the arrow instead of an equal sign dates back to an old programming language that R is derived from (APL). Whether you define objects using arrows or equal signs has no effect on what R does. It is simply a matter of preference.\n\nAs soon as we have defined an object (and assuming that we did everything correctly), our new object will appear in the Environment tab of RStudio’s Memory section (top right panel).\nWe will now cover the most important of the basic R objects, namely:\n\nsingle values\nvectors\nmatrices\n\n\nWe will later turn toward two of the more complex R objects that we are very likely to encounter frequently when working with R:\n\ndata frames\nlists"
  },
  {
    "objectID": "intro3.html#functions-in-r",
    "href": "intro3.html#functions-in-r",
    "title": "Objects and functions",
    "section": "Functions in R",
    "text": "Functions in R\nR functions are predefined pieces of code that we can call by writing the function name and telling R a number of function arguments. Function arguments are pieces of information a function needs to know in order to perform its task (very rarely, a function may not need any argument to perform its task). The general syntax for calling a function looks like this:\n\nfunction_name(argument1, argument2, ...)\n\nThat is, we first write the function’s name, and then define all required arguments in parentheses. If we do that correctly, the function will perform its task. Depending on the function, we will see an output in the console.\nWe will be using two functions below:\n\nThe function c, which we will use to create vectors. The arguments the function c requires are the elements we want to combine into a vector.\nThe function matrix, which creates a matrix from a vector. This functions requires a vector, the number of rows and the number of columns as arguments.\n\n\nCore fact 1: Functions can have a lot of arguments, but it is not always necessary to specify all of them. Most functions have default values for some of their arguments. If we do not specify these arguments, R will just run the function as if we had entered the default value of the argument. If we do specify arguments with default values, we simply override the default.\n\n\nCore fact 2: It is impossible (for most people at least) to remember all functions and which arguments they require. Therefore, R contains a lifesaver in the form of a special function called help. The function help requires the name of a topic (including but not limited to functions) as its main argument. Calling help with the name of a function will show the documentation for that function in the Help tab of the Utility & Help section of RStudio’s interface (bottom right)."
  },
  {
    "objectID": "intro3.html#object-types",
    "href": "intro3.html#object-types",
    "title": "Objects and functions",
    "section": "Object types",
    "text": "Object types\nSingle values, vectors, and matrices can vary by type. The type of these objects refers to the nature of its content, for example whether it contains numbers, character strings, logical arguments etc. The most common types of types are:\n\ndouble: this means numbers with decimal points (although the decimals must not necessarily be displayed)\ninteger: whole numbers that can be negative positive or zero (rarely used because double type numbers are more practical)\ncharacter: a character string, which is essentially a sequence of text symbols (these symbols can include numbers, but these are interpreted as being part of the text and not as numbers)\nlogical: a logical TRUE or FALSE, also called a boolean value"
  },
  {
    "objectID": "intro3.html#single-values",
    "href": "intro3.html#single-values",
    "title": "Objects and functions",
    "section": "Single values",
    "text": "Single values\nSingle values are the simplest type of objects we can define in R. As their name suggests, they represent a single value, for example, the number 7. We could tell R to create a single value called a that consists of the number 7. We do this as follows:\n\na = 7\n\nAlternatively, we can use the arrow notation to define the object.\n\na <- 7\n\nOnce we run either line of code, we should notice that our Environment now contains the object a. There, we can also see that a is the number 7.\nWe can make R show us an object by running its name as code (either via the console or a script). If we enter the name of our single value a as code, we will see the following output.\n\n\n\n[1] 7\n\n\n\nR tells us “7”, which is exactly the value that we specified as a. The “[1]” in front of the value “7” is not important at this point. It merely tells us that the “7” is the first (and only) element of our single value."
  },
  {
    "objectID": "intro3.html#vectors",
    "href": "intro3.html#vectors",
    "title": "Objects and functions",
    "section": "Vectors",
    "text": "Vectors\nVectors are objects that contain multiple values of the same type. Vectors cannot contain elements of different types. We can define vectors using the function c with the function’s arguments being the values we want to combine into the respective vector. The syntax looks as follow:\n\nv1 = c(1,2,3)   # This line of code creates a double vector \n                # called \"v1\" containing the numbers 1 to 3.\n\nv2 = c('hello', 'purple', '11!')  # This creates a character vector\n                                  # called \"v2\" containing three strings.\n\nAfter executing this code, our Environment contains two more objects, v1 and v2. The vector v1 is denoted as a numeric vector (num) whereas v2 is labeled as a character vector (chr).\nJust as with the single value a, we can have a look at our vectors by entering their names as code. For example, we can enter v2 as code.\n\n\n\n[1] \"hello\"  \"purple\" \"11!\"   \n\n\n\nWe now see the three character strings that v2 consists of in the console. Again, there is a [1] at the front of the line. It indicates that “hello” is the first element of v2. If the vector was long enough to occupy multiple rows in the console, each line would start with a number in brackets, indicating which element of the vector is displayed at the beginning of that line.\n\nFun fact: We can think of single values as vectors of length 1.\n\n\nCaveat: If we try to create a vector containing different types of elements, R will not complain (i.e., we do not get an error message)! Instead, R will simply transform some of the elements to ensure that all elements share the same type.\nFor example, if at least one of the elements we want to include in the vector is a character string, R will transform all other element types to character strings and create a character vector.\nIf we try to combine numeric (double or integer) and logical values into one vector, R will interpret “FALSE” as 0 and “TRUE” as 1."
  },
  {
    "objectID": "intro3.html#matrices",
    "href": "intro3.html#matrices",
    "title": "Objects and functions",
    "section": "Matrices",
    "text": "Matrices\nMatrices are the two-dimensional cousins of vectors. They have r rows and c columns. Per convention, the number of rows is stated before the number of columns, that is, a 4x3 matrix has 4 rows and 3 columns (think roman-catholic as a mnemonic aid).\nAs with vectors, all elements of a matrix must share the same type (if we try to combine different types of elements, R will just transform some of the elements to create a homogeneous matrix). In fact, matrices in R are vectors that we break down into rows and columns. To create a matrix, we need to call the function matrix and tell R three arguments: the vector we want to make into a matrix, the number of its rows, and the number of its columns. The syntax looks as follows:\n\nmatrix1 = matrix( # this tells R that we want to create a matrix\n  c(1,2,3,4),     # defines the vector that will turn into a matrix\n  nrow = 2,       # this tells R that our matrix should have 2 rows \n  ncol = 2)       # this tells R that our matrix should have 2 columns\n\nExecuting the code above creates a numerical matrix in our Environment. Other than with single values and vectors, we can click on the name of our matrix in the Environment to view how it looks like. Alternatively, we can enter the name of our matrix as code and have R print it in the console.\n\n\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n\n\nR is convenient in the sense that it is technically sufficient to specify either the number of rows or the number of columns. R will just infer the missing piece of information. For example, if we want to turn a vector of length 6 into a matrix with 2 columns, R will know that the matrix must have 3 rows."
  },
  {
    "objectID": "intro3.html#naming-objects-in-r",
    "href": "intro3.html#naming-objects-in-r",
    "title": "Objects and functions",
    "section": "Naming objects in R",
    "text": "Naming objects in R\nIn order to define an object in R, we need to give it a name and then tell R how the object should look like. Generally speaking, we can get very creative when naming our objects, but there are a few rules we need to keep in mind.\n\nObject names must not start with numbers. The name “item2” is valid, but “2nd” is not (it will return a error message complaining about an “unexpected symbol”).\nObject names may not contain special characters with the exception of underscores and periods. For example, the names “item_2” or “item.2” are valid. Using other special character will often yield error messages because R interprets these characters as operators (e.g., “*” indicates multiplication, “&” is a logical conjunction, etc.).\nObject names must not contain spaces. While “item2” is a valid name, “item 2” is not.\n\n\nNot being allowed to use spaces in object names might prevent us from assigning meaningful and intelligible object names. To deal with the issue, there are three common types of notation:\n\nperiod notation: place periods where you would have placed a space, e.g. trial.number\nunderscore notation: replace spaces with underscores, e.g. trial_number\ncamelBack notation: instead of spaces write everything as one word, but write the beginning of new words with a capital letter, e.g. trialNumber\n\nWhich notation you use is purely a matter of preference. You will likely encounter all of them when using R because the people who created base R or additional packages each have their own preferences regarding notation."
  },
  {
    "objectID": "intro4.html",
    "href": "intro4.html",
    "title": "Data frames and lists",
    "section": "",
    "text": "Here, we will look at two types of R objects that we will frequently encounter when working R, data frames and lists. Both of these object types are a little more complex than the ones we talked about so far, but with greater complexity comes greater utility."
  },
  {
    "objectID": "intro4.html#data-frames",
    "href": "intro4.html#data-frames",
    "title": "Data frames and lists",
    "section": "Data frames",
    "text": "Data frames\nData frames are R objects specifically designed for people who work with data. Just like matrices, they are two-dimensional objects. The main difference, however, is that data frames can contain different types of elements. To be exact, data frames are a combination of different vectors of the same length.\nThe general idea of a data frame is to view every row as an observation and every column as a variable. Therefore, each column represents a vector, which also means that, column-wise, all elements must be of the same type. The same is not true for the rows of a data frame.\n\nHow to define a data frame\nWe can define data frames by calling the function data.frame and entering vectors or matrices as function arguments. Here, vectors are treated as column vectors (or nx1 matrices, if you will). The only requirement is that all of the vectors and matrices we want to combine into a data.frame have the same number of rows.\nBelow is very simple example of how we can define a data frame in R. Imagine, we have collected data from 5 participants, which we will identify by the numbers from 1 to 5, and that we asked them to report their gender (open response) and age in years (numeric value).\n\nmy_data_frame = data.frame(\n  c(1, 2, 3, 4, 5),                                       # participant ID\n  c('male', 'female', 'non-binary', 'female', 'female'),  # participant gender\n  c(25, 19, 23, 22, 28)                                   # participant age\n)\n\n\nNote: In this example, the code is distributed across several lines. Technically, we could have written it all in one long line, but doing so makes it very difficult to read the code. Unless we call a function with few or very short function arguments, it is recommended to use one line for each argument.\nAlso note how the function arguments are shifted a bit to the right. This is called indentation. Indentation has no effects on how the code works in R (it does in other programming languages such as Python!). However, it contributes greatly to the legibility of the code by structuring it.\nIt is, therefore, a good idea to get used to organizing longer pieces of code by using multiple lines and proper indentation. Your future self, your collaborators, and third parties, who will read your code when you make it publicly available, will thank you for it.\n\nOnce we execute the piece of code above, the data frame will appear as an object in RStudio’s Environment (top right). We can immediately see that it is a data frame because RStudio describes data frames as x observations of y variables. In our case that is listed as “5 obs. of 3 variables”.\n\nNote: The Environment will show a small light blue button with a white arrowhead to the left of our data frame’s name. If we click this button, RStudio will “unfold” the data frame and show us a list of the vectors it contains as well as the type of the vector.\n\nJust as with matrices, we can have a look at our new object by either entering its name or by clicking on it in the environment. If we do the former, R will return the data frame in the console, whereas the latter will open the data frame in a separate tab next to our scripts. Let’s go with the code version.\n\n\n\n  c.1..2..3..4..5. c..male....female....non.binary....female....female..\n1                1                                                  male\n2                2                                                female\n3                3                                            non-binary\n4                4                                                female\n5                5                                                female\n  c.25..19..23..22..28.\n1                    25\n2                    19\n3                    23\n4                    22\n5                    28\n\n\n\n\n\nAssigning proper variable names\nWe may notice two things: first, the data frame contains exactly the information we specified as function arguments for the data.frame function; second, each column of our data frame has a very weird name. The reason is that data frames require variable names for each column, and if we do not specify these names, R will just use each vector’s content as a name. This is inconvenient for a number of reasons, so it is desirable to assign proper names to the variables.\nOne way to do so is calling the function names, which allows us to change the names of a data frame’s variables. The function ‘names’ requires the name of the data frame as a function argument. We then define it as a character vector containing the new variable names. The character vector must contain one element for each column of the data frame. For our data frame, it could look like this:\n\nnames(my_data_frame) = c('ID', 'gender', 'age')\n\nIf we now ask R to show us the data frame in the console (by entering its name as code), it will look much tidier.\n\n\n\n  ID     gender age\n1  1       male  25\n2  2     female  19\n3  3 non-binary  23\n4  4     female  22\n5  5     female  28\n\n\n\nAnother way to assign sensible variable names is to specify them when creating the data frame. We can do so by making slight adjustments to the way we enter vectors as function arguments when calling the data.frame function. In fact, the code will look as if we define vectors as objects. The only difference is that when doing so within the data.frame function, the vectors will not be created outside the data frame (i.e., they will not appear as separate objects in the Environment). Here is what the code would look like for our data frame.\n\nmy_data_frame = data.frame(  \n  ID = c(1, 2, 3, 4, 5),                                          # ID\n  gender = c('male', 'female', 'non-binary', 'female', 'female'), # gender\n  age = c(25, 19, 23, 22, 28)                                     # age\n) \n\nThe result is the same as if we had used the names function.\n\n\n\n  ID     gender age\n1  1       male  25\n2  2     female  19\n3  3 non-binary  23\n4  4     female  22\n5  5     female  28\n\n\n\n\n\nEntering matrices into data frames\nAs mentioned above, we can also enter matrices as function arguments when creating a data frame, as long as these matrices have the correct number of rows. Let’s assume that we additionally collected responses from two Likert scale items (levels 1 to 5), which we would like to enter into our data frame. Our code would then look like this:\n\nmy_data_frame = data.frame(  \n  ID = c(1, 2, 3, 4, 5),                                          # ID\n  gender = c('male', 'female', 'non-binary', 'female', 'female'), # gender\n  age = c(25, 19, 23, 22, 28),                                    # age\n  matrix(c(1, 3, 5, 4, 3, 5, 5, 3, 2, 2), nrow = 5)               # responses \n) \n\nRunning this code creates a data frame with 5 observations of 5 variables in in the environment. One problem is that we cannot name the two new variables contained in the matrix as we did with the vectors. However, when we look at our data frame, we will notice that the variable names do not look as terrible as they did when we entered the unnamed vectors. Instead, the variables will be named “X1” and “X2” (when entering a matrix, R will just assign the names from “X1” to “Xi” for a matrix with i columns).\nStill, we might prefer less obscure names for our two measures. One possibility is to use the names function as we did above. Another is to create the matrix as a separate object before creating the data frame. This allows us to set proper column names using the function colnames. This function works very similar to the names function but is specifically designed for matrices. Here is what the code would look like.\n\n# First, we create our 5x2 matrix as an object\nresponse_matrix = matrix(\n  c(1, 3, 5, 4, 3, 5, 5, 3, 2, 2), \n  nrow = 5\n)\n\n# Next, we assign column names\ncolnames(response_matrix) = c('item1', 'item2')\n\n# Finally, we create the data frame\nmy_data_frame = data.frame(  \n  ID = c(1, 2, 3, 4, 5),                                          # ID\n  gender = c('male', 'female', 'non-binary', 'female', 'female'), # gender\n  age = c(25, 19, 23, 22, 28),                                    # age\n  response_matrix                                                 # responses \n) \n\nThe new variables in our data frame now have proper names. We can check this by calling the name of our data frame and inspecting it in the console (or by clicking on its name in the Environment).\n\n\n\n  ID     gender age item1 item2\n1  1       male  25     1     5\n2  2     female  19     3     5\n3  3 non-binary  23     5     3\n4  4     female  22     4     2\n5  5     female  28     3     2\n\n\n\n\nDefining objects outside a data frame and then simply using their name as a function argument when calling the data.frame function is not limited to matrices but can also be done for vectors. While there are good reasons for defining objects separately before combining them into a data frame, one downside is that our Environment can get a wee bit cluttered.\nIf we want to tidy up our environment, we can remove objects we no longer need (for example, because we put them into a data frame) using the function rm. We simply need to use the name of the object we want to remove as the function argument for rm, and it will be disappear from the Environment."
  },
  {
    "objectID": "intro4.html#lists",
    "href": "intro4.html#lists",
    "title": "Data frames and lists",
    "section": "Lists",
    "text": "Lists\nThe final type of R object we need to know for now is the list. Lists are very flexible containers that we can create using the list function. Think of lists as multi-purpose storage units. They can contain all other types of R objects (including other lists). For example, we could create a list that contains a single character string, a numeric vector, and a data frame. To do so, we simply call the function list and enter each object we want to store in the list as a function argument.\n\nmy_value = 'hello'          # a single character value\nmy_vector = c(1,1,2,3,5,8)  # a numeric vector\n\n# The following code creates a list with three elements\nmy_list = list(\n  my_value,\n  my_vector,\n  my_data_frame\n)\n\nrm(my_value, my_vector)   # this removes two of the objects from the environment\n\nAs with other objects, the new list will appear in the Environment. RStudio tells us that this object is a list of 3. Just like for a data frame, there is a small light blue button to its left that allows us to unfold the list and have a look at its contents.\nWe can also click on the list in the environment to have a look at it or have R print the list in the console by calling its name. If we do the latter, the output looks like this:\n\n\n\n[[1]]\n[1] \"hello\"\n\n[[2]]\n[1] 1 1 2 3 5 8\n\n[[3]]\n  ID     gender age item1 item2\n1  1       male  25     1     5\n2  2     female  19     3     5\n3  3 non-binary  23     5     3\n4  4     female  22     4     2\n5  5     female  28     3     2\n\n\n\nAs we can see, the output lists the elements of our list one after another. The first element of the list is preceded by “[[1]]”, the second by “[[2]]”, and so on.\n\nNote: Once we start analysing data in R, we will frequently encounter lists. The reason is that many R functions used in inferential statistics use lists as outputs."
  },
  {
    "objectID": "working1.html",
    "href": "working1.html",
    "title": "Single Values",
    "section": "",
    "text": "We already know ho to define R objects. We will now turn to the question how to work with them. Generally speaking, we can work with R objects by performing operations on them. There are two ways of doing so: one is to use binary operators. Binary operators are symbols that R uses to represent a specific operation involving two objects. These operations can be arithmetic or logical. Another way to perform operations on R objects is to feed them into functions as function arguments.\nWe can think of a function as an (often) elaborate sequence of simple operations. As such, they can involve more than two objects. However, functions are not only more elaborate than operations using a binary operator; they are also more flexible, because we can modify what a function does or how it does it via its additional function arguments.\nIn the following, we will learn how to perform arithmetic and logical operations on single values by using some of R’s built-in binary operators and by using functions. But before we jump into action, we need to have a look at how R’s binary operators look like."
  },
  {
    "objectID": "working1.html#arithmetic-binary-operators",
    "href": "working1.html#arithmetic-binary-operators",
    "title": "Single Values",
    "section": "Arithmetic binary operators",
    "text": "Arithmetic binary operators\nR has seven built-in arithmetic binary operators (you will probably not use the last two, but we will include them for the sake of completeness).\n\n\n\n\n\n\n\n\nOperator\nOperation\nWhat R does\n\n\n\n\n+\naddition\ncomputes the sum of two numbers\n\n\n-\nsubtraction\nsubtracts the second number from the first\n\n\n*\nmultiplication\ncomputes the product of two numbers\n\n\n-\ndivision\ndivides first number by the second\n\n\n^\npower\ntakes the first to the power of the second\n\n\n%%\nmodulo\ntakes the remainder of division\n\n\n%/%\ninteger division\ndivision rounded down to whole numbers\n\n\n\nNow that we know the symbols for R’s arithmetic binary operators, we can start using them on numeric objects.\nHere are a few examples:\n\na = 7   # defines a numeric value to play around with\nb = 2   # defines a second numeric value\n\na + 3   # adds 3 to our value for a sum of 10\n\n5 * a   # multiples 5 by a for a product of 35\n\na ^ b   # computes a to the power of b (49)\n\nThis is what appears in the console:\n\n\n\n[1] 10\n\n\n[1] 35\n\n\n[1] 49\n\n\n\nOf course, we can also use arithmetic operators involving multiple numeric values, and we can save the result by defining it as another object.\n\nNote that R follows the basic rules of arithmetic operations. That is, power takes precedence over multiplication or division, which, in turn, take precedence over addition or subtraction. Just as in school maths, we need to use parentheses to organize our operations accordingly.\n\n\nx = 3   # define a numeric value\ny = 2   # define another value\n\nz = x ^ 2 / (x * y - x)\n\nIn the example above, we defined a numeric value called z. Since power takes precedence over division, R first computes x to the power of 2 (for a total of 9). It then divides 9 by the expression in the parentheses. Within the parentheses, multiplication takes precedence over subtraction, which means that R first computed the product of x and y (which is 6) and then subtracts x for a total of 3. So our code boils down to dividing 9 by 3. We can easily verify that R did that by inspecting the new object z.\n\nz\n\n\n\n\n[1] 3\n\n\n\n\nArithmetic operators should only work on numeric values (integer or double). Accordingly, R will complain if at lest one of the objects we use as arguments is a character string. Specifically, it will return an error message in the console stating that we assigned a non-numeric argument to the binary operator.\nSomething similar should happen if we assign at least one boolean value, that is, a value stating either a logical TRUE or FALSE. Keep in mind, however, that R sometimes changes the type of an object so that it works with an operator or function (this is called coercion). If we use a boolean value in an arithmetic operation, R will just treat it as a binary numeric variable (FALSE = 0, TRUE = 1)."
  },
  {
    "objectID": "working1.html#logical-operators",
    "href": "working1.html#logical-operators",
    "title": "Single Values",
    "section": "Logical operators",
    "text": "Logical operators\nBesides arithmetic operators, R has several built-in logical binary operators. Logical binary operators require two objects as argument and then check if something is TRUE or FALSE. In other word, they return a boolean value. Here is the list of logical operators:\n\n\n\n\n\n\n\nOperator\nWhat R tests\n\n\n\n\n<\nthe first value is less than the second\n\n\n<=\nthe first value is less than or equal to the second\n\n\n>\nthe first value is greater than the second\n\n\n>=\nthe first value is greater than or equal to the second\n\n\n==\nthe first value is exactly equal to the second\n\n\n!=\nthe first value is not equal to the second\n\n\n\nSome of these logical operators can only be used on numeric values or on boolean values that R has coerced to being numeric. However, the last two operators work on any type of value. Here are a few examples:\n\na = \"hello\"   # a character value\nb = FALSE     # a boolean value\nd = 13        # a numeric value\n\na != \"hello\"  # tests if a is unqeual to the string \"hello\" (this is FALSE)\n\nb == FALSE    # tests if b is the boolean value FALSE (which is TRUE)\n\nd <= 25       # tests if d is less than or equal to 25 (TRUE)\n\nd > b         # tests if 13 is greater than FALSE\n              # R will coerce the object b to become numeric with FALSE \n              # equaling 0 (therefore, th statement is TRUE)\n\nHere is what the output in the console looks like.\n\n\n\n[1] FALSE\n\n\n[1] TRUE\n\n\n[1] TRUE\n\n\n[1] TRUE\n\n\n\n\nNote In the example above, we named the three objects a, b, and d. This was neither an oversight nor an expression of dislike toward the letter c. The simple reason is that there is a function called c, and it is prudent to avoid giving objects the same name as existing functions.\nTechnically, it is possible to assign an object the name of a function, but it may lead to confusion or problems. Therefore, it is best avoided.\n\nJust as with numeric binary operators, we can form longer expressions by combining logical operations. There are two ways to connect two logical operations. Each has its own symbol in R.\n\n\n\n\n\n\n\nOperator\nWhat it means\n\n\n\n\n&\nAND\n\n\n\n\n\n\n\nA few examples:\n\na == \"hello\" & d != 7 # tests if both a equal \"hello\" and d differs from 7\n                      # since both statements are true, R will return TRUE\n\nb == FALSE | d == 7   # tests if either b equals FALSE (which is TRUE)\n                      # or d equal 7 (which is FALSE); since at least\n                      # one of the statements is true, R will return TRUE\n\na == \"bye\" | b == TRUE | d != 13  # here, we test if any of three tests is TRUE\n                                  # none of them are TRUE, so R will say FALSE\n\nHere is what the ourput in the console looks like:\n\n\n\n[1] TRUE\n\n\n[1] TRUE\n\n\n[1] FALSE\n\n\n\n\nThe ! has some special uses in R. It represents the logical argument “non”. There are several functions that"
  },
  {
    "objectID": "working1old.html",
    "href": "working1old.html",
    "title": "Operations on numeric objects",
    "section": "",
    "text": "We already know ho to define numeric values, vectors, or matrices in R. Here, we will learn how we use them in arithmetic operations."
  },
  {
    "objectID": "working1old.html#basic-operations-on-single-values",
    "href": "working1old.html#basic-operations-on-single-values",
    "title": "Operations on numeric objects",
    "section": "Basic operations on single values",
    "text": "Basic operations on single values\nIn R, the basic arithmetic operations use specific symbols, that is, in order to perform these operations, we do not need to call functions. These symbols look as follows:\n\naddition: +\nsubtraction: -\nmultiplication: *\ndivision: /\nexponentiation: ^\n\nHere are a few examples:\n\na = 7   # defines a numeric value to play around with\n\na + 3   # adds 3 to our value for a sum of 10\n\n5 * a   # multiples 5 by a for a product of 35\n\na ^ 2     # computes a to the power of 2 (49)\n\nThis is what appears in the console:\n\n\n\n[1] 10\n\n\n[1] 35\n\n\n[1] 49\n\n\n\nOf curse, we can also use operators involving multiple objects, and we can save the result by defining it as another object.\n\nNote that R follows the basic rules of arithmetic operations. That is, power takes precedence over multiplication or division, which, in turn, take precedence over addition or subtraction. Just as in school maths, we need to use parentheses to organize our operations accordingly.\n\n\nx = 3   # define a numeric value\ny = 2   # define another value\n\nz = x ^ 2 / (x * y - x)\n\nIn the example above, we defined a numeric value called z. Since power takes precedence over division, R first computes x to the power of 2 (for a total of 9). It then divides 9 by the expression in the parentheses. Within the parentheses, multiplication takes precedence over subtraction, which means that R first computed the product of x and y (which is 6) and then subtracts x for a total of 3. So our code boils down to dividing 9 by 3. We can easily verify that R did that by inspecting the new object z.\n\nz\n\n\n\n\n[1] 3"
  },
  {
    "objectID": "working1old.html#basic-operations-on-vectors-and-matrices",
    "href": "working1old.html#basic-operations-on-vectors-and-matrices",
    "title": "Operations on numeric objects",
    "section": "Basic operations on vectors and matrices",
    "text": "Basic operations on vectors and matrices\nIn R, we can use the same operations we can use on single values when working with vectors and matrices. That is, we can:\n\nadd or subtract a specific number to a numeric vector or matrix\nmultiply or divide a numeric vector or matrix by a specific number\ntake a numeric vector or matrix to the power of a specific number\n\nLet’s first define a vector containing the numbers from 1 to 9. Usually, we would define this vector using the function c, and entering the numbers from 1 to 9 as function arguments. However, defining vectors of consecutive integers in this fashion can become a bit tiresome, so we will use a more efficient option that R offers.\n\nv1 = 1:9  # create a vector of integers from 1 to 9\n\n\nNote that the code above creates an integer vector (whole numbers). We can verify this by calling the function typeof and using our vector v1 as its argument. Had we created v1 by using the function c and entering all number from 1 to 9 as function arguments, the resulting vector would have been a double vector instead (decimal numbers). However, in practice,this does not need to concern us because we can use any operation that works on decimal numbers on integers in R.\n\nNow that we have defined our vector, we can use it in the operations above. For example, we can add a number to it.\n\nv1 + 5\n\nThe output in the console looks as follows:\n\n\n\n[1]  6  7  8  9 10 11 12 13 14\n\n\n\nAs we can see, R performed the operation (add 5) to each element of our vector v1. The same would have happened, had we chosen another arithmetic operation.\nUsing matrices in basic operations works in the same fashion. To show this, we will first turn our vector v1 into a matrix, which we will call m1 for lack of creativity. We will then multiply the new matrix by 2.\n\nm1 = matrix(v1, ncol = 3, nrow = 3)\n\nm1 * 2\n\nAs we can see from the output in the console, R has indeed multiplied each element of our matrix by two.\n\n\n\n     [,1] [,2] [,3]\n[1,]    2    8   14\n[2,]    4   10   16\n[3,]    6   12   18"
  },
  {
    "objectID": "working1old.html#multiplication-of-vectors-and-matrices",
    "href": "working1old.html#multiplication-of-vectors-and-matrices",
    "title": "Operations on numeric objects",
    "section": "Multiplication of vectors and matrices",
    "text": "Multiplication of vectors and matrices"
  }
]