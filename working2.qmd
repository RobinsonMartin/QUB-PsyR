---
title: "Functions"
---

Most of the things we will do when using R will be done using functions. We can think of a function as an (often) elaborate sequence of simple operations. As such, they can involve more than two objects. However, functions are not only more elaborate than operations using a binary operator; they are also more flexible, because we can modify what a function does or how it does it via its additional function arguments.

:::{.alert .alert-info}
Consider, for example the function *matrix* we used previously. It is flexible because the function arguments *nrow* and *ncol* allow us to create matrices of arbitrary size.
:::


## The basic setup of R functions

All R function share the same setup. The function has a unique name by which we can call it, and it has a number of *function arguments* that we need to specify in parentheses following the function name when calling the function.

Function arguments can be objects that we would like to feed to the function or parameters of the function that influence what the function does. Some of a function's arguments are **required** arguments, that is, if we do not specify these arguments, the functions won't run. Instead, R will complain by printing an error message telling us that we did not specify a required function argument.

A function may also entail **non-required** function arguments. Technically, these arguments are also required, but the person who wrote the function defined **default values** for the arguments. If a function argument has a default value, we do not need to specify it in order for the function to run. The function will simply run as if we had entered the respective argument's default value manually.

:::{alert .alert-info}
Occasionally, we might come across functions that have no arguments at all. These functions are quite rare. We can can them by writing nothing in the parentheses following the function's name.
:::

## The most useful function in R - help

All functions in R are documented in order to help users understand what the function does, what its arguments are and what they do. We can ask R to show us the documentation using the function *help*. If we call this function and feed it the name of an R function as a function argument, R will display the documentation in the **help** tab of the **utility & help** section (bottom right of RStudio's interface). Note that the function *help* requires the function name to be a character string, that is, we need to write it in quotation marks.

As an alternative to calling the function's name in regular R syntax, we can type the functions name in the search field of the **help** tab.If we use this way to learn about a function, we do not need quotation marks.

Once we call the help function, R will show us the documentation of an existing R function or a group of related functions. R will generally display a lot of information. What information is displayed exactly depends on the function.

The following information will be shown for all functions:

- the **name** of the function
- what **R package** it is from
- a **description** of the the function does
- how to call the function (**usage**)
- the functions' **arguments**
- a description of the type and format of the function's output (**value**)
- functioning R code showing **examples** of how the function can be used

There may be additional information for some functions such as:
- a description of the maths or logic underlying the function (**details**)
- additional information of potential interest to the user (**note**)
- **references** to literature the literature the function is based on
- links to related functions (**see also**)

Let's look at an example by asking R to show us the documentation for the function *median* using R syntax.

```{r}
#| eval: false
#| echo: true
#| code-overflow: wrap
help("median")
```

R will now show us the following in the **help** tab.

![Fig 1. Documentation for the function median](images/working/help_median.png)

Let's first look at the **description**. Unsurprisingly, it states that this function computes the sample median.

One of most relevant sections of the documentation is the function's **usage**. As we can see, the function *median* has two function arguments, *x* and *na.rm*. The second argument, *na.rm* has a default value, indicated by the equal sign and a specific value (FALSE) to its right. If we do not specify *na.rm*, R will use the value FALSE as a default. Since the argument *x* has no default, we must specify it. Otherwise, the function won't run.

The other highly relevant section is the **arguments** section. It tells us what the function arguments do and values are acceptable for each of the two function arguments. The argument *x* must be a numeric vector (we can ignore the first part of the sentence referring quite obscurely to 'an object for which a method has been defined'). This is the set of numbers for which we will compute the median. The second function argument, *na.rm*, defines how missing values (represented by NA, meaning "not available") should be handled. The function will not work when our numeric vector *x* contains at least one NA value. By setting *na.rm* to TRUE, we can tell R to remove the NA values prior to computing the median.

Finally, let's inspect the **value** section. From what the function is supposed to do, we would expect it to return a single numeric value. The documentation tells us that this value can be a double type value when the vector is of even length (in this case, the median is the mean of the two centremost values of *x*). It also informs us that the output of the function will be NA if *x* is either an empty vector of if *x* contains NA values while *na.rm* is set to FALSE.


:::{alert .alert-info}
At the top left of the documentation, R states in braces following the function's name which R package it stems from. In case of the function *median*, the package it belongs to is called *stats*. This package along with *base* is built into core R.

**Caveat**: If a function does not belong to one of R's built-in packages, R's *help* will not know the function unless the respective package is loaded (see the section on installing and loading additional packages for more information).
:::
